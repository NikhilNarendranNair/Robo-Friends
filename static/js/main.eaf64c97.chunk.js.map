{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","Cardlist","robots","cardComponent","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","proxyurl","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,mBACpB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCKCC,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAEhF,OACA,yBAAKL,UAAU,MACbQ,EADF,MCGcK,EATG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACE,yBAAKd,UAAU,kBACd,2BAAOe,KAAK,SAASC,YAAY,gBAAiBhB,UAAU,mCAC3DiB,SAAUH,MCGAI,EAPA,SAACnB,GACf,OACE,yBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,UACxCtB,EAAMuB,WCqBIC,E,kDAtBd,WAAYxB,GACX,IAAD,8BACC,cAAMA,IACDyB,MAAQ,CACZC,UAAW,GAHb,E,gEASCC,KAAKC,SAAS,CAAEF,UAAS,M,+BAIzB,OAAGC,KAAKF,MAAMC,SAEN,2DAEDC,KAAK3B,MAAMuB,a,GApBQM,aC2DbC,G,wDArDd,aACC,IAAD,8BACC,gBAoBDC,eAAkB,SAACC,GAElB,EAAKJ,SAAS,CAAEK,YAAcD,EAAME,OAAOC,SArB3C,EAAKV,MAAQ,CACZjB,OAAS,GACTyB,YAAc,IAJhB,E,gEASC,IAAD,OAOCG,MAAMC,kFACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACpB,OAASiC,S,+BAQvC,IAAD,EACgCd,KAAKF,MAA5BjB,EADT,EACSA,OAAOyB,EADhB,EACgBA,YACTS,EAAiBlC,EAAOmC,QAAO,SAAAC,GACrC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASb,EAAYY,kBAErD,OAAIrC,EAAOuC,OAOT,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,eAAd,gBACA,kBAAC,EAAD,CAAWc,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvB,OAAUkC,OAVjB,2C,GAnCQb,cCClBmB,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eaf64c97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n/*const Card = ({name, email, id}) => {         If we dont want to use props keyword again and again use this syntax instead of below  */\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib ma2 tc br3 pa2 grow bw2 shadow-5'>\r\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${props.id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user,i)=>{\r\n\t\treturn \t<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t})\r\n\treturn(\r\n\t<div className=\"tc\">\r\n\t\t{cardComponent};\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t\t<div className='pa2 ma3 br2 tc'>\r\n\t\t\t\t<input type='search' placeholder='Search Robots'  className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t onChange={searchChange} />\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t\t<div style={{ overflow: 'scroll', height: '800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch()\r\n\t{\r\n\t\tthis.setState({ hasError:true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError)\r\n\t\t{\r\n\t\t\treturn <h1>Oppsss....We got some issue</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots : [],\r\n\t\t\tsearchfield : ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; \r\n\t\t//Heroku is a site that allows access-control, the above line is just used for deploying prj in github\r\n\r\n\t\tconst url=\"https://jsonplaceholder.typicode.com/users\";\r\n\t\t//the above url doesn't makes use of access-control header hence we will atach the url with heroku site\r\n\r\n\t\tfetch(proxyurl +url)\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => this.setState({robots : users}));\r\n\t}\r\n\r\n\tonSearchChange =  (event) =>\r\n\t{\r\n\t\tthis.setState({ searchfield : event.target.value });\r\n\t}\r\n\trender()\r\n\t{\r\n\t\tconst { robots,searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(!robots.length)\r\n\t\t{\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1 shadow-3'>Robo friends</h1>\r\n\t\t\t\t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<Cardlist robots= { filteredRobots } />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './Containers/app';\n\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}